import streamlit as st
import pandas as pd
import numpy as np
from mf2 import MF2
import random

r_cols = ['movie_id', 'title', 'release_date', 'video_release_date', 'IMDB_url'] + [f'genre_{i}' for i in range(19)]

movie_info = pd.read_csv('ml-100k/u.item', sep='|', names=r_cols, encoding='latin-1') # item_info la 1 df (dataframe)
movie_title = dict(zip(movie_info['movie_id'], movie_info['title']))
title_to_id = {title : id for id, title in movie_title.items()}


# ƒê·ªçc d·ªØ li·ªáu test
r_cols = ['user_id', 'item_id', 'rating', 'unix_timestamp']
ratings_test = pd.read_csv('ml-100k/ub.test', sep='\t', names=r_cols, encoding='latin-1')
rate_test = ratings_test.values
rate_test[:, :2] -= 1

st.title("üé¨ Demo h·ªá g·ª£i √Ω t·ªïng h·ª£p")
st.subheader("Ch·ªçn √≠t nh·∫•t 5 phim y√™u th√≠ch ƒë·ªÉ nh·∫≠n g·ª£i √Ω!")

movie_choices = movie_info['title'].tolist()
selected_movies = st.multiselect("Ch·ªçn phim y√™u th√≠ch: ", movie_choices)

if st.button("üéÅ G·ª£i √Ω cho t√¥i!"):
    if len(selected_movies) < 5:
        st.warning("‚ö†Ô∏è B·∫°n c·∫ßn ch·ªçn √≠t nh·∫•t 5 b·ªô phim.")
    else:
        # Mapping title -> movie_id v√† g√°n rating = 5.0 cho m·ªói b·ªô phim y√™u th√≠ch
        selected_ids = [title_to_id[title] for title in selected_movies]
        # selected_ids = random.sample(range(1000), 200)
        # new_user_ratings = [[movie_id, 5.0] for movie_id in selected_ids]

        # M·ªói phim y√™u th√≠ch s·∫Ω c√≥ rating ng·∫´u nhi√™n t·ª´ 4.0 ƒë·∫øn 5.0 thay v√¨ lu√¥n l√† 5.0 -> gi√∫p d·ªØ li·ªáu m√¥ ph·ªèng ch√¢n th·ª±c h∆°n.
        new_user_ratings = [[movie_id, round(random.uniform(4.0, 5.0), 1)] for movie_id in selected_ids]

        # Load model v√† d·ª± ƒëo√°n
        mf_model = MF2.load("model/mf_model")
        mf_model.add_new_user(new_user_ratings)

        print(f"{mf_model.evaluate_RMSE(rate_test)}")


        predictions = mf_model.pred_for_user(mf_model.n_users - 1)
        top_k_recs = sorted(predictions, key = lambda x: x[1], reverse=True)[:10]

        st.markdown("## üì¢ G·ª£i √Ω theo Matrix Factorization:")
        for movie_id, rating in top_k_recs:
            if movie_id not in selected_ids:
                rating = min(5, max(1, round(rating, 1)))
                st.write(f"üé¨ {movie_title[movie_id]} ‚Äî ‚≠ê {rating:.1f}")
